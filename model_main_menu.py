from telebot import types

class UserState:
    def __init__(self):
        self.is_photo_received = False
        self.is_photos_received = 0
        self.description_received = False
        self.description = ""
        self.photo_id = None
        self.is_editing_text = False

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def get_user_state(user_id):
    if user_id not in user_states:
        user_states[user_id] = UserState()
    return user_states[user_id]

def start(message, bot):
    markup = types.InlineKeyboardMarkup()
    btn_3d_scan = types.InlineKeyboardButton('3D –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï', callback_data='3d_scan_main_menu')
    markup.row(btn_3d_scan)
    btn_3d_model = types.InlineKeyboardButton('3D –ú–û–î–ï–õ–ò–†–û–í–ê–ù–ò–ï', callback_data='3d_model_main_menu')
    btn_3d_print = types.InlineKeyboardButton('3D –ü–ï–ß–ê–¢–¨', callback_data='3d_print_main_menu')
    markup.row(btn_3d_model, btn_3d_print)
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! \n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ä–∞–∑–¥–µ–ª üòÉ", reply_markup=markup, parse_mode='HTML')


def handle_photo(message, bot):
    state = get_user_state(message.from_user.id)
    state.is_photo_received = True
    state.is_photos_received += 1
    if state.is_photos_received == 1:
        bot.send_message(message.chat.id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ñ–æ—Ç–æ.")
        state.description_received = True
        state.photo_id = message.photo[-1].file_id
    else: send_buttons_after_delete(message,bot)

def send_buttons_after_delete(message, bot):
    state = get_user_state(message.from_user.id)
    if state.is_photo_received:
        keyboard = types.InlineKeyboardMarkup()
        delete_button = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="delete_photo")
        edit_text_button = types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text")
        confirm_button = types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data="confirm_send")
        keyboard.row(delete_button)
        keyboard.row(edit_text_button)
        keyboard.row(confirm_button)   
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

        
    
def handle_description(message, bot):
    state = get_user_state(message.from_user.id)
    state.description = message.text
    state.description_received = False
    bot.send_message(message.chat.id, f"–û–ø–∏—Å–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç —Ä–∞–±–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {state.description1}")

    keyboard = types.InlineKeyboardMarkup()
    delete_button = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="delete_photo")
    edit_text_button = types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text")
    confirm_button = types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data="confirm_send")
    keyboard.row(delete_button)
    keyboard.row(edit_text_button)
    keyboard.row(confirm_button)
    bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",reply_markup = keyboard)

  

    


def delete_photo(call, bot):
    state = get_user_state(call.from_user.id)
    try:
        if state.is_editing_text:
            bot.delete_message(call.message.chat.id)
        else: bot.delete_message(call.message.chat.id, call.message.message_id - 4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    bot.send_message(call.message.chat.id, "–§–∞–π–ª —É–¥–∞–ª–µ–Ω, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª")
    state.is_photo_received = False
    

    

def edit_text(call, bot):
    state = get_user_state(call.from_user.id)
    state.is_editing_text = True
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç —Ä–∞–±–æ—Ç:")

def handle_messages(message, bot):
    state = get_user_state(message.from_user.id)
    
    if state.is_editing_text:
        state.description = message.text
        bot.send_message(message.chat.id, f"–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {state.description}")
        state.is_editing_text = False  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è           
        
        keyboard = types.InlineKeyboardMarkup()
        delete_button = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="delete_photo")
        edit_text_button = types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text")
        confirm_button = types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data="confirm_send")
        keyboard.row(delete_button)
        keyboard.row(edit_text_button)
        keyboard.row(confirm_button)
        bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",reply_markup = keyboard)

def confirm_send(call, bot):
    state = get_user_state(call.from_user.id)
    bot.send_message(call.message.chat.id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    if state.photo_id:
        bot.send_photo(call.message.chat.id, state.photo_id, caption=state.description)  
        bot.answer_callback_query(call.id) 
        bot.send_message(call.message.chat.id, f"{call.message.from_user.first_name}–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
        bot.send_message(call.message.chat.id, "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /start")
    reset_user_state(call,bot)

def reset_user_state(call, bot):
    user_id = call.from_user.id
    print(f"–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    if user_id in user_states:
        del user_states[user_id]  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞
    bot.answer_callback_query(call.id)
    # start(call.message, bot)  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


def model_main_menu(call, bot):
    user_state = get_user_state(call.from_user.id)
    user_state.is_photo_received = True  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
    bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è 3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è.")

def configure_model_handlers(bot):
    @bot.message_handler(commands=['start'])
    def start_handler(message):
        user_id = message.from_user.id
        print(f"–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {user_id}")
        start(message, bot)

    @bot.message_handler(content_types=['photo'])
    def handle_photo_handler(message):
        handle_photo(message, bot)          
        

    @bot.callback_query_handler(func=lambda call: call.data == 'delete_photo')
    def delete_photo_handler(call):
        delete_photo(call, bot)

    @bot.callback_query_handler(func=lambda call: call.data == 'edit_text')
    def edit_text_handler(call):
        edit_text(call, bot)
        
    @bot.message_handler(func=lambda message: get_user_state(message.from_user.id).description_received)
    def handle_description_handler(message):
        handle_description(message, bot)

    @bot.message_handler(func=lambda message: get_user_state(message.from_user.id).is_editing_text)
    def handle_messages_handler(message):
        handle_messages(message, bot)

    @bot.callback_query_handler(func=lambda call: call.data == 'confirm_send')
    def confirm_send_handler(call):
        confirm_send(call, bot)

    
    @bot.callback_query_handler(func=lambda call: call.data in ['3d_scan_main_menu', '3d_model_main_menu', '3d_print_main_menu'])
    def model_main_menu_handler(call):
        if call.data == '3d_model_main_menu':
            model_main_menu(call, bot)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é


    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è 
    @bot.callback_query_handler(func=lambda call: call.data == 'start')
    def reset_user_state_handler(call):
        reset_user_state(call, bot)





    